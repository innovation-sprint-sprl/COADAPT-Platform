// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entities.Migrations
{
    [DbContext(typeof(COADAPTContext))]
    [Migration("20200916064425_Sept2020")]
    partial class Sept2020
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Entities.Models.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("Entities.Models.AppUsageLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Message");

                    b.Property<DateTime>("ReportedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<string>("Tag");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("AppUsageLogs");
                });

            modelBuilder.Entity("Entities.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Shortname")
                        .IsRequired();

                    b.Property<int>("StudyId");

                    b.HasKey("Id");

                    b.HasIndex("StudyId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Entities.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Shortname")
                        .IsRequired();

                    b.Property<int>("SubAdministratorId");

                    b.HasKey("Id");

                    b.HasIndex("SubAdministratorId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Entities.Models.OuraActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AverageMet");

                    b.Property<int>("CaloriesActive");

                    b.Property<int>("CaloriesTotal");

                    b.Property<string>("Class5Min");

                    b.Property<int>("DailyMovement");

                    b.Property<DateTime>("DayEnd")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("DayStart")
                        .HasColumnType("DATETIME");

                    b.Property<int>("High");

                    b.Property<int>("Inactive");

                    b.Property<int>("InactivityAlerts");

                    b.Property<int>("Low");

                    b.Property<int>("Medium");

                    b.Property<string>("Met1Min");

                    b.Property<int>("MetMinHigh");

                    b.Property<int>("MetMinInactive");

                    b.Property<int>("MetMinLow");

                    b.Property<int>("MetMinMedium");

                    b.Property<int>("MetMinMediumPlus");

                    b.Property<int>("NonWear");

                    b.Property<int>("ParticipantId");

                    b.Property<int>("Rest");

                    b.Property<int>("Score");

                    b.Property<int>("ScoreMeetDailyTargets");

                    b.Property<int>("ScoreMoveEveryHour");

                    b.Property<int>("ScoreRecoveryTime");

                    b.Property<int>("ScoreStayActive");

                    b.Property<int>("ScoreTrainingFrequency");

                    b.Property<int>("ScoreTrainingVolume");

                    b.Property<int>("Steps");

                    b.Property<DateTime>("SummaryDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("TargetCalories");

                    b.Property<int>("TargetKm");

                    b.Property<int>("TargetMiles");

                    b.Property<int>("TimezoneOffset");

                    b.Property<int>("ToTargetKm");

                    b.Property<int>("ToTargetMiles");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("OuraActivities");
                });

            modelBuilder.Entity("Entities.Models.OuraReadiness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ParticipantId");

                    b.Property<int>("PeriodId");

                    b.Property<int>("Score");

                    b.Property<int>("ScoreActivityBalance");

                    b.Property<int>("ScoreHrvBalance");

                    b.Property<int>("ScorePreviousDay");

                    b.Property<int>("ScorePreviousNight");

                    b.Property<int>("ScoreRecoveryIndex");

                    b.Property<int>("ScoreRestingHr");

                    b.Property<int>("ScoreSleepBalance");

                    b.Property<int>("ScoreTemperature");

                    b.Property<DateTime>("SummaryDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("OuraReadinesses");
                });

            modelBuilder.Entity("Entities.Models.OuraSleep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Awake");

                    b.Property<DateTime>("BedtimeEnd")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("BedtimeStart")
                        .HasColumnType("DATETIME");

                    b.Property<int>("BreathAverage");

                    b.Property<int>("Deep");

                    b.Property<int>("Duration");

                    b.Property<int>("Efficiency");

                    b.Property<string>("Hr5Min");

                    b.Property<int>("HrAverage");

                    b.Property<int>("HrLowest");

                    b.Property<string>("Hypnogram5Min");

                    b.Property<int>("Light");

                    b.Property<int>("MidpointTime");

                    b.Property<int>("OnsetLatency");

                    b.Property<int>("ParticipantId");

                    b.Property<int>("PeriodId");

                    b.Property<int>("Rem");

                    b.Property<int>("Restless");

                    b.Property<int>("RmsSd");

                    b.Property<string>("RmsSd5Min");

                    b.Property<int>("Score");

                    b.Property<int>("ScoreAlignment");

                    b.Property<int>("ScoreDeep");

                    b.Property<int>("ScoreDisturbances");

                    b.Property<int>("ScoreEfficiency");

                    b.Property<int>("ScoreLatency");

                    b.Property<int>("ScoreRem");

                    b.Property<int>("ScoreTotal");

                    b.Property<DateTime>("SummaryDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("TemperatureDelta");

                    b.Property<int>("TimezoneOffset");

                    b.Property<int>("Total");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("OuraSleeps");
                });

            modelBuilder.Entity("Entities.Models.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BirthPlace");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("DateOfFirstJob")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Files");

                    b.Property<string>("Gender");

                    b.Property<string>("Language");

                    b.Property<int?>("TherapistId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TherapistId");

                    b.HasIndex("UserId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Entities.Models.PhysiologicalSignal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float?>("Accuracy");

                    b.Property<int>("ParticipantId");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("DATETIME(3)");

                    b.Property<string>("Type");

                    b.Property<float>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("PhysiologicalSignals");
                });

            modelBuilder.Entity("Entities.Models.PsychologicalReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Ambition");

                    b.Property<int>("Anxiety");

                    b.Property<int>("AttitudeTowardsLife");

                    b.Property<int>("CareerAndSuccess");

                    b.Property<int>("CareerSatisfaction");

                    b.Property<int>("ClimateAndOrganizationalStructure");

                    b.Property<DateTime>("DateOfReport")
                        .HasColumnType("DATETIME");

                    b.Property<int>("Depression");

                    b.Property<int>("GlobalSeverityIndex");

                    b.Property<int>("HomeWorkInterface");

                    b.Property<int>("HomeWorkRelationship");

                    b.Property<int>("Hostility");

                    b.Property<int>("IndividualInfluences");

                    b.Property<int>("InterpersonalHypersensitivity");

                    b.Property<int>("InterpersonalRelationshipsSatisfaction");

                    b.Property<int>("IntrinsicFactorsOfWork");

                    b.Property<int>("Involvement");

                    b.Property<int>("JobSatisfaction");

                    b.Property<int>("LocusOfControlSynthetic");

                    b.Property<int>("LocusOfControlTotal");

                    b.Property<int>("Logical");

                    b.Property<int>("ManagementProcesses");

                    b.Property<int>("ManagerialRole");

                    b.Property<string>("MedicalConditionSelfAssessment");

                    b.Property<int>("ObsessivenessCompulsiveness");

                    b.Property<int>("OrganizationalForces");

                    b.Property<int>("OrganizationalProcessesSatisfaction");

                    b.Property<int>("ParanoidIdeation");

                    b.Property<int>("ParticipantId");

                    b.Property<int>("PerceivedStressScale");

                    b.Property<int>("PhobicAnxiety");

                    b.Property<int>("PhysicalHealth");

                    b.Property<int>("PositiveSymptomDistressIndex");

                    b.Property<int>("PositiveSymptomTotal");

                    b.Property<string>("PsychologicalConditionSelfAssessment");

                    b.Property<int>("PsychologicalHealth");

                    b.Property<int>("Psychoticism");

                    b.Property<int>("RelationshipWithOtherPeople");

                    b.Property<int>("SettingAndOrganizationalStructureSatisfaction");

                    b.Property<int>("SleepProblem");

                    b.Property<int>("SocialSupport");

                    b.Property<int>("Somatization");

                    b.Property<string>("StressfulEvents");

                    b.Property<int>("StyleOfBehavior");

                    b.Property<int>("SyntheticJobSatisfaction");

                    b.Property<int>("TaskOrientation");

                    b.Property<string>("TherapistComments");

                    b.Property<string>("ThoughtsOnChildren");

                    b.Property<string>("ThoughtsOnParents");

                    b.Property<int>("Time");

                    b.Property<int>("TotalJobSatisfaction");

                    b.Property<string>("TrialUserComments");

                    b.Property<int>("TypeASynthetic");

                    b.Property<int>("TypeATotal");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("PsychologicalReports");
                });

            modelBuilder.Entity("Entities.Models.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Shortname")
                        .IsRequired();

                    b.Property<int>("StudyId");

                    b.HasKey("Id");

                    b.HasIndex("StudyId");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("Entities.Models.Study", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Shortname")
                        .IsRequired();

                    b.Property<int>("SupervisorId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Studies");
                });

            modelBuilder.Entity("Entities.Models.StudyParticipant", b =>
                {
                    b.Property<int>("StudyId");

                    b.Property<int>("ParticipantId");

                    b.Property<bool>("Abandoned");

                    b.Property<int>("DataCollectionTurn");

                    b.Property<DateTime>("DateOfCurrentJob")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Education");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("DATETIME");

                    b.Property<int>("GroupId");

                    b.Property<string>("JobType");

                    b.Property<string>("MaritalStatus");

                    b.Property<int>("NumberOfChildren");

                    b.Property<string>("PlaceOfConsent");

                    b.Property<string>("PlaceOfResidence");

                    b.Property<string>("RegionOfResidence");

                    b.Property<int>("SiteId");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.HasKey("StudyId", "ParticipantId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("SiteId");

                    b.ToTable("StudyParticipants");
                });

            modelBuilder.Entity("Entities.Models.SubAdministrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SubAdministrators");
                });

            modelBuilder.Entity("Entities.Models.Supervisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Supervisors");
                });

            modelBuilder.Entity("Entities.Models.Therapist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME");

                    b.Property<string>("Gender");

                    b.Property<string>("Name");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Therapists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Entities.Models.Administrator", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Entities.Models.Group", b =>
                {
                    b.HasOne("Entities.Models.Study", "Study")
                        .WithMany("Groups")
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Models.Organization", b =>
                {
                    b.HasOne("Entities.Models.SubAdministrator", "SubAdministrator")
                        .WithMany()
                        .HasForeignKey("SubAdministratorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Models.OuraActivity", b =>
                {
                    b.HasOne("Entities.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Models.OuraReadiness", b =>
                {
                    b.HasOne("Entities.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Models.OuraSleep", b =>
                {
                    b.HasOne("Entities.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Models.Participant", b =>
                {
                    b.HasOne("Entities.Models.Therapist", "Therapist")
                        .WithMany("Participants")
                        .HasForeignKey("TherapistId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Entities.Models.PhysiologicalSignal", b =>
                {
                    b.HasOne("Entities.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Models.PsychologicalReport", b =>
                {
                    b.HasOne("Entities.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Models.Site", b =>
                {
                    b.HasOne("Entities.Models.Study", "Study")
                        .WithMany("Sites")
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Models.Study", b =>
                {
                    b.HasOne("Entities.Models.Organization", "Organization")
                        .WithMany("Studies")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Models.Supervisor", "Supervisor")
                        .WithMany("Studies")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Models.StudyParticipant", b =>
                {
                    b.HasOne("Entities.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Models.Participant", "Participant")
                        .WithMany("StudyParticipants")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Models.Study", "Study")
                        .WithMany("StudyParticipants")
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Models.SubAdministrator", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Entities.Models.Supervisor", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Entities.Models.Therapist", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
